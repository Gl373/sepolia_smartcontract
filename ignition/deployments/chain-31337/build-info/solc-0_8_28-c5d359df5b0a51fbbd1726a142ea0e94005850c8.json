{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-c5d359df5b0a51fbbd1726a142ea0e94005850c8",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/PointsToRewards.sol": "project/contracts/PointsToRewards.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/PointsToRewards.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.28;\r\n\r\ncontract PointsToRewards {\r\n    struct Member {\r\n        string name; \r\n        uint points; \r\n        bool isRegistered; \r\n    }\r\n\r\n    mapping(address => Member) public members;\r\n\r\n    address public admin;\r\n\r\n    enum RewardType { TShirt, VIPStatus }\r\n\r\n    event PointsAwarded(address indexed member, uint points);\r\n    event RewardRedeemed(address indexed member, RewardType reward);\r\n\r\n    constructor() {\r\n        admin = msg.sender; \r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"Only admin can perform this action\");\r\n        _;\r\n    }\r\n\r\n    function registerMember(string memory name) public {\r\n        require(!members[msg.sender].isRegistered, \"You are already registered\");\r\n        members[msg.sender] = Member(name, 0, true);\r\n    }\r\n\r\n    function awardPoints(address member, uint points) public onlyAdmin {\r\n        require(members[member].isRegistered, \"Member is not registered\");\r\n        members[member].points += points;\r\n        emit PointsAwarded(member, points);\r\n    }\r\n\r\n    function transferPoints(address to, uint points) public {\r\n        require(members[msg.sender].isRegistered, \"You are not registered\");\r\n        require(members[to].isRegistered, \"Recipient is not registered\");\r\n        require(members[msg.sender].points >= points, \"Insufficient points\");\r\n        members[msg.sender].points -= points;\r\n        members[to].points += points;\r\n    }\r\n\r\n    function getPointsBalance() public view returns (uint) {\r\n        require(members[msg.sender].isRegistered, \"You are not registered\");\r\n        return members[msg.sender].points;\r\n    }\r\n\r\n    function redeemReward(RewardType reward) public {\r\n        require(members[msg.sender].isRegistered, \"You are not registered\");\r\n        uint cost;\r\n        if (reward == RewardType.TShirt) {\r\n            cost = 50;\r\n        } else if (reward == RewardType.VIPStatus) {\r\n            cost = 100;\r\n        }\r\n        require(members[msg.sender].points >= cost, \"Insufficient points\");\r\n        members[msg.sender].points -= cost;\r\n        emit RewardRedeemed(msg.sender, reward);\r\n    }\r\n}\r\n\r\n"
      }
    }
  }
}